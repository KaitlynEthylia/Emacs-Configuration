#+TITLE: Emacs Config
#+AUTHOR: Kaitlyn~Ethylia
#+DESCRIPTION: Highly unfinished emacs configuration
#+PROPERTY: header-args:emacs-lisp :tangle init.el

An extremely unfinished emacs setup in org mode.
Most things aren't here yet and there are also a lot of things that need fixing

* Basic Setup

** Variables

#+begin_src emacs-lisp
  (setq-default
   buffer-file-coding-system 'utf-8-unix
   cursor-type 'bar
   frame-inhibit-implied-resize t)

  (setq
   debug-on-error t
   inhibit-startup-message t
   ring-bell-function 'ignore
   org-src-preserve-indentation t
   display-line-numbers 'relative
   backup-directory-alist
     `(("." . ,(expand-file-name "backup" user-emacs-directory))))
#+end_src

** Modes

#+begin_src emacs-lisp
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (scroll-bar-mode 0)
  (global-display-line-numbers-mode 1)

  (dolist (mode '(term-mode-hook
		  shell-mode-hook
		  eshell-mode-hook
                  mastodon-mode-hook))
		(add-hook mode (lambda () (display-line-numbers-mode 0))))
#+end_src

** Fonts

#+begin_src emacs-lisp
  (defvar fixed-pitch-font "Cascadia Code")
  (defvar variable-pitch-font "Roboto")

  (set-face-attribute 'default nil :font fixed-pitch-font :height 100)
  (set-face-attribute 'fixed-pitch nil :font fixed-pitch-font :height 100)
  (set-face-attribute 'variable-pitch nil :font variable-pitch-font :height 100)
#+end_src

* Packages

#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives
               '(("gnu" . "https://elpa.gnu.org/packages/")
                 ("nongnu" . "https://elpa.nongnu.org/nongnu/")
                 ("melpa" . "https://melpa.org/packages/")))
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
#+end_src

** Use Package

#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

* Help

** Which Key

[[https://github.com/justbur/emacs-which-key][Which Key]]
#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode 1))
#+end_src

** Vertico

[[https://github.com/minad/vertico][Vertico]]
#+begin_src emacs-lisp
  (use-package vertico
    :custom (vertico-cycle t)
    :init (vertico-mode))
#+end_src

** Marginalia

[[https://github.com/minad/marginalia][Marginalia]]
#+begin_src emacs-lisp
  (use-package marginalia :after vertico
    :init (marginalia-mode))
#+end_src

** Helpful

[[https://github.com/Wilfred/helpful][Helpful]]
#+begin_src emacs-lisp
  (use-package helpful
    :custom (counsel-describe-function-function #'helpful-callable)
	    (counsel-describe-variable-function #'helpful-variable)
    :bind ([remap describle-function] . counsel-describe-function)
	  ([remap describle-command] . helpful-command)
	  ([remap describle-variable] . counsel-describe-variable)
	  ([remap describle-key] . helpful-key))
#+end_src

* Aesthetic

** Rainbow Delimiters

[[https://github.com/Fanael/rainbow-delimiters][Rainbow Delimiters]]
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Theme

[[https://github.com/catppuccin/emacs][Catppuccin]]
#+begin_src emacs-lisp
  (use-package catppuccin-theme
    :custom (catppuccin-flavor 'frappe)
    :init (load-theme 'catppuccin t))
#+end_src

** Modeline

[[https://github.com/seagle0128/doom-modeline][Doom Modeline]]
#+begin_src emacs-lisp
  (use-package doom-modeline
    :custom (doom-modeline-height 50)
    :init (doom-modeline-mode 1))
#+end_src

** Discord RPC

[[https://github.com/Mstrodl/elcord][Elcord]]
#+begin_src emacs-lisp
  (use-package elcord
    :init (elcord-mode 1))
#+end_src

** Nerd Icons

[[https://github.com/rainstormstudio/nerd-icons.el][Nerd Icons]]
#+begin_src emacs-lisp
  (use-package nerd-icons)
#+end_src

** Emojify

[[https://github.com/iqbalansari/emacs-emojify][Emojify]]
#+begin_src emacs-lisp
  (use-package emojify
    :init (global-emojify-mode))
#+end_src

* Org Mode

** Settings

#+begin_src emacs-lisp
  (setq org-ellipsis " ~")
#+end_src

** Visual Fill Column

[[https://codeberg.org/joostkremers/visual-fill-column][Visual Fill Column]]
#+begin_src emacs-lisp
  (use-package visual-fill-column
    :custom (visual-fill-column-width 110)
	    (visual-fill-column-center-text t))
#+end_src

** Org Present

[[https://github.com/rlister/org-present][Org Present]]
#+begin_src emacs-lisp
  (use-package org-present
    :hook (org-present-mode . (lambda ()
            (org-display-inline-images)
	    (org-present-read-only)
	    (variable-pitch-mode 1)
	    (visual-fill-column-mode 1)
	    (visual-line-mode 1)
            (display-line-numbers-mode 0)
            (setq-local
              header-line-format " "
              face-remapping-alist '(
                (org-document-title (:height 1.8 :weight bold) org-document-title)
                (org-level-1 (:height 1.8 :weight semi-bold) org-level-1)
                (org-level-2 (:height 1.6 :weight semi-bold) org-level-2)
                (org-level-3 (:height 1.3 :weight semi-bold) org-level-3)
                (org-level-4 (:height 1.1 :weight semi-bold) org-level-4)))))
	  (org-present-mode-quit . (lambda ()
            (org-remove-inline-images)
            (org-present-show-cursor)
	    (variable-pitch-mode 1)
	    (visual-fill-column-mode 0)
	    (visual-line-mode 0)
            (display-line-numbers-mode 1)
            (setq-local
              header-line-format nil
              face-remapping-alist nil))))

  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
#+end_src

** Org Roam

[[https://www.orgroam.com/][Org Roam]]
#+begin_src emacs-lisp
  (use-package org-roam)
#+end_src

* Git

** Projectile

[[https://github.com/bbatsov/projectile][Projectile]]
#+begin_src emacs-lisp
  (use-package projectile
    :init (projectile-mode))
#+end_src

** Magit

[[https://magit.vc/][Magit]]
#+begin_src emacs-lisp
  (use-package magit)
#+end_src

* Fediverse

** Mastodon

[[https://codeberg.org/martianh/mastodon.el][Mastodon.el]]
#+begin_src emacs-lisp
  (use-package mastodon
    :custom (mastodon-instance-url "https://tech.lgbt")
            (mastodon-active-user "kaitlynethylia"))
#+end_src

* LSP

** Eglot

#+begin_src emacs-lisp
  (use-package eglot
    :hook (prog-mode . eglot)
    :config ()
#+end_src

* Completion

** Dabbrev

#+begin_src emacs-lisp
  (use-package dabbrev)
#+end_src

** Orderless

[[https://github.com/oantolin/orderless][Orderless]]
#+begin_src emacs-lisp
  (use-package orderless
    :custom (completion-styles '(orderless basic))
            (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

** Corfu

[[https://github.com/minad/corfu][Corfu]]
#+begin_src emacs-lisp
  (use-package corfu
    :custom (corfu-cycle t)
            (corfu-seperator ?\s)
    :hook (prog-mode . corfu-mode))
#+end_src

** Kind Icon

[[https://github.com/jdtsmith/kind-icon][Kind Icon]]
#+begin_src emacs-lisp
  (use-package kind-icon :after corfu
    :custom (kind-icon-default-face 'corfu-default)
	    (kind-icon-use-icons nil)
	    (kind-icon-mapping
	     `((array ,(nerd-icons-codicon "nf-cod-symbol_array") :face font-lock-type-face)
               (boolean ,(nerd-icons-codicon "nf-cod-symbol_boolean") :face font-lock-builtin-face)
               (class ,(nerd-icons-codicon "nf-cod-symbol_class") :face font-lock-type-face)
               (color ,(nerd-icons-codicon "nf-cod-symbol_color") :face success)
               (command ,(nerd-icons-codicon "nf-cod-terminal") :face default)
               (constant ,(nerd-icons-codicon "nf-cod-symbol_constant") :face font-lock-constant-face)
               (constructor ,(nerd-icons-codicon "nf-cod-triangle_right") :face font-lock-function-name-face)
               (enummember ,(nerd-icons-codicon "nf-cod-symbol_enum_member") :face font-lock-builtin-face)
               (enum-member ,(nerd-icons-codicon "nf-cod-symbol_enum_member") :face font-lock-builtin-face)
	       (enum ,(nerd-icons-codicon "nf-cod-symbol_enum") :face font-lock-builtin-face)
               (event ,(nerd-icons-codicon "nf-cod-symbol_event") :face font-lock-warning-face)
               (field ,(nerd-icons-codicon "nf-cod-symbol_field") :face font-lock-variable-name-face)
               (file ,(nerd-icons-codicon "nf-cod-symbol_file") :face font-lock-string-face)
               (folder ,(nerd-icons-codicon "nf-cod-folder") :face font-lock-doc-face)
               (interface ,(nerd-icons-codicon "nf-cod-symbol_interface") :face font-lock-type-face)
               (keyword ,(nerd-icons-codicon "nf-cod-symbol_keyword") :face font-lock-keyword-face)
               (macro ,(nerd-icons-codicon "nf-cod-symbol_misc") :face font-lock-keyword-face)
               (magic ,(nerd-icons-codicon "nf-cod-wand") :face font-lock-builtin-face)
               (method ,(nerd-icons-codicon "nf-cod-symbol_method") :face font-lock-function-name-face)
               (function ,(nerd-icons-codicon "nf-cod-symbol_method") :face font-lock-function-name-face)
               (module ,(nerd-icons-codicon "nf-cod-file_submodule") :face font-lock-preprocessor-face)
               (numeric ,(nerd-icons-codicon "nf-cod-symbol_numeric") :face font-lock-builtin-face)
               (operator ,(nerd-icons-codicon "nf-cod-symbol_operator") :face font-lock-comment-delimiter-face)
               (param ,(nerd-icons-codicon "nf-cod-symbol_parameter") :face default)
               (property ,(nerd-icons-codicon "nf-cod-symbol_property") :face font-lock-variable-name-face)
               (reference ,(nerd-icons-codicon "nf-cod-references") :face font-lock-variable-name-face)
               (snippet ,(nerd-icons-codicon "nf-cod-symbol_snippet") :face font-lock-string-face)
               (string ,(nerd-icons-codicon "nf-cod-symbol_string") :face font-lock-string-face)
               (struct ,(nerd-icons-codicon "nf-cod-symbol_structure") :face font-lock-variable-name-face)
               (text ,(nerd-icons-codicon "nf-cod-text_size") :face font-lock-doc-face)
               (typeparameter ,(nerd-icons-codicon "nf-cod-list_unordered") :face font-lock-type-face)
               (type-parameter ,(nerd-icons-codicon "nf-cod-list_unordered") :face font-lock-type-face)
               (unit ,(nerd-icons-codicon "nf-cod-symbol_ruler") :face font-lock-constant-face)
               (value ,(nerd-icons-codicon "nf-cod-symbol_field") :face font-lock-builtin-face)
               (variable ,(nerd-icons-codicon "nf-cod-symbol_variable") :face font-lock-variable-name-face)
               (t ,(nerd-icons-codicon "nf-cod-code") :face font-lock-warning-face)))
    :config (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src

** Cape

[[https://github.com/minad/cape][Cape]]
#+begin_src emacs-lisp
  (use-package cape
    :init (dolist (func '(cape-dabbrev
			  cape-file
			  cape-elisp-block))
	    (add-to-list 'completion-at-point-functions func)))
#+end_src

* TODO EWW

* TODO Dired

* TODO Shell

* Keybinds

** General

[[https://github.com/noctuid/general.el][General.el]]
#+begin_src emacs-lisp
  (use-package general
    :config
    (general-create-definer ethy/leader
      :prefix "S-SPC"))
#+end_src

** Keymaps

#+begin_src emacs-lisp
  (ethy/leader "SPC" '(execute-extended-command :wk "Open Command Line"))
  (ethy/leader "p" '(projectile-command-map :wk "Projectile"))
  (ethy/leader "l" '(lsp-command-map :wk "LSP Mode"))
#+end_src

** Buffer

#+begin_src emacs-lisp
  (ethy/leader "b" '(:ignore t :wk "Buffer")
    "bk" '(kill-this-buffer :wk "Kill the buffer")
    "bo" '(next-buffer :wk "Next buffer")
    "ba" '(previous-buffer :wk "Previous buffer")
    "bfs" '(switch-to-buffer :wk "Find buffer"))
#+end_src

** Org Present

#+begin_src emacs-lisp
  (ethy/leader "o" '(:ignore t :wk "Org Present")
    "op" '(org-present :wk "Begin presentation")
    "oq" '(org-present-quit :wk "Quit presentation")
    "ot" '(org-present-prev :wk "Previous slide")
    "on" '(org-present-next :wk "Next slide")
    "ow" '(org-present-read-write :wk "Enable editing in org present mode")
    "oG" '(org-present-end :wk "End of presentation")
    "ogg" '(org-present-beginning :wk "Beginning of presentation"))
#+end_src

** Modes

#+begin_src emacs-lisp
  (ethy/leader "m" '(:ignore t :wk "Modes")
    "mm" '(mastodon :wk "Open mastodon client")
    "mp" '(org-present :wk "Begin org-present presentation")
    "mg" '(magit :wk "Begin using Magit"))
#+end_src

** Completion

#+begin_src emacs-lisp
  (ethy/leader "TAB" '(:ignore t :wk "Completion")
    "TAB p" '(completion-at-point :wk "Point Completion")
    "TAB t" '(complete-tag :wk "Tag Completion")
    "TAB d" '(cape-dabbrev :wk "Dabbrev Completion")
    "TAB f" '(cape-history :wk "History Completion")
    "TAB h" '(cape-file :wk "File Completion")
    "TAB k" '(cape-keyword :wk "Keyword Completion")
    "TAB s" '(cape-symbol :wk "Symbol Completion")
    "TAB l" '(cape-line :wk "Line Completion"))
#+end_src

* TODO
- Properly bind Helpful commands
- Add Matrix fedi client
- Set up Org Roam
- Set per-language themes
- Fix nerd icons in corfu
- Embark?
- Emacsclient?
- Project.el?
- Make this readme actually any good
- Fix C-Backspace (the default is so annoying)
- Nitpick at everything until i like it
- Add more info to README
- Reorganise everything because this organisation is a bit too scattered
- Fix prog mode hooks
